
package net.myfigurecollection.android;

import java.net.URLEncoder;

import net.myfigurecollection.R;
import net.myfigurecollection.android.data.SearchFigureProvider;
import net.myfigurecollection.android.data.XMLHandler;
import net.myfigurecollection.android.data.objects.Category;
import net.myfigurecollection.android.data.objects.Figure;
import net.myfigurecollection.android.webservices.MFCService;
import net.myfigurecollection.android.webservices.RequestListener;
import Utils.Constants;
import Utils.Flip3dAnimation;
import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.DataSetObserver;
import android.database.StaleDataException;
import android.graphics.Color;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.SearchRecentSuggestions;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.animation.AccelerateInterpolator;
import android.widget.AdapterView;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;

import com.actionbarsherlock.app.SherlockListFragment;
import com.actionbarsherlock.view.ActionMode;
import com.actionbarsherlock.view.ActionMode.Callback;
import com.actionbarsherlock.view.Menu;
import com.climbatize.imagemanager.ImageManager;
import com.climbatize.imagemanager.ImageManagerListener;
import com.climbatize.imagemanager.NotInCacheException;
import com.google.zxing.integration.android.IntentIntegrator;

public class FigureListFragment extends SherlockListFragment implements RequestListener, ImageManagerListener
{
	private static boolean								isLarge				= false;
	private static final String							TAB					= "tab";
	public static final String							FIGURE_TAB			= "net.myfigurecollection.FigureTab";
	private static final String							COLOR				= "color";
	private static final String							MARGINLEFT			= "marginr";
	private static final String							MARGINRIGHT			= "marginl";
	private static final String							MARGINBOTTOM		= "marginb";
	private static final String							MARGINTOP			= "margint";
	private static final String							WEIGHT				= "weight";
	public static String								ADDITIONAL_SORTER	= "";
	public static int									EXPANDED_MODE		= 0;
	public static boolean								isLandscape;
	private OnFigureSelectedListener					tutSelectedListener;
	long												curfigure;
	// private Cursor newsCursor;
	public String										curcat;

	private SharedPreferences							UserSettings;
	protected ProgressDialog							dialog;
	float												scale				= 1;
	private Cursor										newsCursor;
	boolean												lastlogin			= false, own = false, buy = false, wish = false, delete = false, noeffect = false;
	private int											curposition			= 0;
	FrameLayout											mView				= null;
	private android.widget.LinearLayout.LayoutParams	lp;
	public static ActionMode							mMode;
	private FigureDatabaseAdapter						figureDatabaseAdapter;
	private static boolean								creating			= false;
	private static boolean								refresh				= false;

	public FigureListFragment()
	{}

	public FigureListFragment(int color, float weight, int margin_left, int margin_right, int margin_top, int margin_bottom, int tab,
			OnFigureSelectedListener listener)
	{
		Bundle args = new Bundle();
		args.putInt(COLOR, color);
		args.putFloat(WEIGHT, weight);
		args.putInt(MARGINLEFT, margin_left);
		args.putInt(MARGINRIGHT, margin_right);
		args.putInt(MARGINBOTTOM, margin_bottom);
		args.putInt(MARGINTOP, margin_top);
		args.putInt(TAB, tab);
		setArguments(args);
		this.tutSelectedListener = listener;
	}

	public static FigureListFragment newInstance(int color, float weight, int margin_left, int margin_right, int margin_top, int margin_bottom, int tab,
			OnFigureSelectedListener listener)
	{
		FigureListFragment f = new FigureListFragment(color, weight, margin_left, margin_right, margin_top, margin_bottom, tab, listener);
		return f;
	}

	@Override
	public void onListItemClick(ListView l, View v, int position, long id)
	{
		curfigure = v.getId();
		String content = Constants.FIGUREURL + curfigure + "#idx_tabs";
		EXPANDED_MODE = View.GONE;
		tutSelectedListener.onFigureSelected(content);
		figureDatabaseAdapter.notifyDataSetChanged();
		if (mMode != null) mMode.finish();
		curposition = position;
		// l.setSelection(position);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{

		this.mView = new FrameLayout(this.getActivity());

		GradientDrawable background = (GradientDrawable) this.getResources().getDrawable(R.drawable.bg_rect);

		this.mView.setBackgroundDrawable(background);
		lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT, getArguments()
				.getFloat(MARGINRIGHT));
		lp.setMargins(getArguments().getInt(MARGINLEFT), getArguments().getInt(MARGINTOP), getArguments().getInt(MARGINRIGHT),
				getArguments().getInt(MARGINBOTTOM));
		this.mView.setLayoutParams(lp);

		FrameLayout.LayoutParams flp = new FrameLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		ListView lv = new ListView(this.getActivity());
		lv.setLayoutParams(flp);
		lv.setId(android.R.id.list);
		lv.setScrollingCacheEnabled(false);
		lv.setPersistentDrawingCache(ListView.PERSISTENT_ALL_CACHES);
		lv.setCacheColorHint(getArguments().getInt(COLOR));
		lv.setFastScrollEnabled(true);
		lv.setSmoothScrollbarEnabled(true);
		lv.setStackFromBottom(false);
		mView.addView(lv);
		final int padding = (int) getResources().getDimension(R.dimen.list_padding);
		mView.setPadding(padding, padding, padding, padding);

		UserSettings = getActivity().getSharedPreferences(MFCService.PREFERENCES, Context.MODE_WORLD_WRITEABLE);
		if (!isLarge) isLarge = getResources().getBoolean(R.bool.isLarge);

		return this.mView;

	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState)
	{
		super.onActivityCreated(savedInstanceState);
		

		registerForContextMenu(getListView());

		/* Add Context-Menu listener to the ListView. */
		// getListView().setOnCreateContextMenuListener(l);
		getListView().setLongClickable(true);

		getListView().setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1, int arg2, long arg3)
			{
				Log.d("test", "menuContext");
				mMode = getSherlockActivity().startActionMode(new FigureAcionMode(arg1.getId()));
				tutSelectedListener.onContextMenu((int) getListView().getSelectedItemId());
				figureDatabaseAdapter.notifyDataSetChanged();
				return true;
			}
		});

		getListView().setVisibility(View.VISIBLE);

	}

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		// setListAdapter(ArrayAdapter.createFromResource(getActivity().getApplicationContext(),
		// R.array.tut_titles, R.layout.list_item));

	}

	@Override
	public void onSaveInstanceState(Bundle outState)
	{
		super.onSaveInstanceState(outState);
	}

	@Override
	public void onDestroy()
	{
		if (newsCursor != null) newsCursor.close();
		// if(mMode!=null) mMode.finish();
		super.onDestroy();
	}

	@Override
	public void onPause()
	{
		if (newsCursor != null) newsCursor.deactivate();
		// if(mMode!=null) mMode.finish();
		super.onPause();
	}

	@Override
	public void onResume()
	{
		if (getActivity().getIntent().getExtras() != null)
		{
			// tab =
			// getActivity().getIntent().getExtras().getInt(FigureListFragment.FIGURE_TAB,
			// getArguments().getInt("tab", -1));

			scale = getResources().getDisplayMetrics().density;

			if (Constants.DEBUGMODE) Log.d(Constants.PROJECT_TAG, "onCreate : intent action: " + getActivity().getIntent().getAction());
			if (Intent.ACTION_SEARCH.equals(getActivity().getIntent().getAction()))
			{
				String query = getActivity().getIntent().getStringExtra(SearchManager.QUERY);

				SearchRecentSuggestions suggestions = new SearchRecentSuggestions(getActivity(), SearchFigureProvider.AUTHORITY, SearchFigureProvider.MODE);
				suggestions.saveRecentQuery(query, null);

				new XMLHandler(getActivity(), refresh).execute(Constants.API_MODE_SEARCH + URLEncoder.encode(query));
				if (Constants.DEBUGMODE) Log.d(Constants.PROJECT_TAG, "onCreate : query " + query);
				// tutSelectedListener.changeVisibility(R.id.Gallery01,
				// View.INVISIBLE);
				// tab = -1;
			} else
			{
				// tutSelectedListener.changeVisibility(R.id.TextSearch,
				// View.GONE);
				load(refresh);
			}
		} else
		{
			// tab = 0;
			// tutSelectedListener.changeVisibility(R.id.TextSearch, View.GONE);
			load(refresh);
		}
		super.onResume();
		refreshTab();
	}

	private void refreshTab()
	{
		if (newsCursor != null) newsCursor.requery();
		// getListView().invalidate();
		// int position = getListView().getFirstVisiblePosition();
		// if (position > 0) curposition = position;

		// setSelection(curposition > 0 ? curposition - 1 : curposition);

	}

	public void load(boolean forceRefresh)
	{
		try
		{
			getListView().scrollTo(0, 0);
			Log.d("DEBUG", " list = " + getListView().getCount());
		}
		catch (IllegalStateException e)
		{
			Log.e(Constants.PROJECT_TAG, "IllegalStateException", e);
		}
		// tab = 0;
		// if (getActivity().getIntent().getExtras() != null)
		// {
		// tab =
		// getActivity().getIntent().getExtras().getInt(FigureListFragment.FIGURE_TAB);
		// }

		//if (!creating)
		{
			creating = true;
			XMLHandler xmlh = new XMLHandler(getActivity(), forceRefresh);
			refresh = false;
			xmlh.setListener(this);
			xmlh.execute((Constants.API_MODE_COLLECTION + UserSettings.getString("Login", "Kumasanmk")));
		}

	}

	private void createTabs()
	{

		final String[] projection = getProjection();

		curcat = Integer.toString(getArguments().getInt(TAB, -1));

		newsCursor = getActivity().getContentResolver().query(Figure.CONTENT_URI, projection, "status=?", new String[] { curcat },
				ADDITIONAL_SORTER + Figure.NAME + " ASC");
		newsCursor.registerDataSetObserver(new DataSetObserver() {
			@Override
			public void onInvalidated()
			{
				for (StackTraceElement e : new Throwable().getStackTrace())
					Log.d(Constants.PROJECT_TAG, "onInvalidated : " + e);
				super.onInvalidated();
			}
		});

		figureDatabaseAdapter = new FigureDatabaseAdapter(getActivity(), R.layout.cell_figure, newsCursor, projection, new int[] { 0, 0, 0, 0, 0, 0, 0, 0 });
		setListAdapter(figureDatabaseAdapter);

		try
		{
			getListView().invalidate();
		}
		catch (IllegalStateException e)
		{
			Log.e(Constants.PROJECT_TAG, "IllegalStateException", e);
		}

		try
		{
			closePopup();
		}
		catch (IllegalArgumentException e)
		{
			Log.e(Constants.PROJECT_TAG, "Dialog Error", e);
		}

	}

	public String[] getProjection()
	{
		return new String[] { Figure._ID, Figure.ID, Figure.NAME, Figure.DATE, Figure.MANUFACTURER, Figure.PRICE, Category.COLOR,
				Figure.SCORE };
	}

	public Cursor getNewsCursor()
	{
		return newsCursor;
	}

	public void setNewsCursor(Cursor newsCursor)
	{
		this.newsCursor = newsCursor;
	}

	public class FigureDatabaseAdapter extends SimpleCursorAdapter
	{

		public FigureDatabaseAdapter(Context context, int layout, Cursor c, String[] from, int[] to)
		{
			super(context, layout, c, from, to);
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent)
		{
			View v = super.getView(position, convertView, parent);

			getListView().setFastScrollEnabled(isLarge && isLandscape || EXPANDED_MODE == View.VISIBLE);

			final TextView subtitle = (TextView) v.findViewById(R.id.TextView_subtitle);
			final TextView title = (TextView) v.findViewById(R.id.TextView_title);
			final TextView version = (TextView) v.findViewById(R.id.TextView_version);

			title.setVisibility(isLarge && isLandscape ? View.VISIBLE : EXPANDED_MODE);
			subtitle.setVisibility(isLarge && isLandscape ? View.VISIBLE : EXPANDED_MODE);
			version.setVisibility(isLarge && isLandscape ? View.VISIBLE : EXPANDED_MODE);

			if (ImageManager.getInstance(getActivity()).getDefault_img() == null)
			{
				ImageManager.getInstance().setDefault_img(getResources().getDrawable(R.drawable.tsuko));
			}

			try
			{

				int date = getCursor().getInt(getCursor().getColumnIndex(Figure.DATE));

				StringBuilder sb = new StringBuilder("" + (date > 0 ? date : ""));

				String name = getCursor().getString(getCursor().getColumnIndex(Figure.NAME));

				int manuStart = name.lastIndexOf("(", name.length() - 1);
				sb.append(" ").append(getCursor().getString(getCursor().getColumnIndex(Figure.MANUFACTURER)));

				if (getCursor().getInt(getCursor().getColumnIndex(Figure.PRICE)) > 0) sb.append(" - ")
						.append("" + getCursor().getInt(getCursor().getColumnIndex(Figure.PRICE))).append(" JPY");

				subtitle.setText(sb.toString());
				title.setText(name.subSequence(0, manuStart));
				version.setText(" ");

				ImageView iv = (ImageView) v.findViewById(R.id.ImageView_icon);

				v.setId((int) getItemId(position));
				if (curfigure == v.getId())
				{
					title.setTextColor(Color.BLACK);
					subtitle.setTextColor(Color.BLACK);
					version.setTextColor(Color.BLACK);
					v.setBackgroundColor(Color.parseColor("#FFFFDD00"));
				} else
				{
					title.setTextColor(Color.WHITE);
					subtitle.setTextColor(Color.WHITE);
					version.setTextColor(Color.WHITE);
					v.setBackgroundColor(Color.parseColor(getCursor().getString(getCursor().getColumnIndex(Category.COLOR)).replace("#", "#88")));
				}
				try
				{
					ImageManager.getInstance(getActivity()).addToDownloadList(Constants.THUMBROOT + v.getId() + ".jpg", iv, FigureListFragment.this);
				}
				catch (NotInCacheException e)
				{
					Log.e(Constants.PROJECT_TAG, "NotInCacheException in getView", e);
				}

			}
			catch (NullPointerException npe)
			{
				if (Constants.DEBUGMODE) Log.w(Constants.PROJECT_TAG, "Not a figure");
			}

			return v;
		}

		@Override
		public long getItemId(int position)
		{

			if (getCursor().moveToPosition(position))
			{
				Long id = 0l;
				try
				{
					id = (long) getCursor().getInt(getCursor().getColumnIndex(Figure.ID));

				}
				catch (StaleDataException e)
				{
					Log.e(Constants.PROJECT_TAG, "StaleDataException", e);
				}
				return id;
			}
			return 0;
		}

	}

	void openPopup()
	{
		if (dialog != null) dialog.dismiss();
		else dialog = ProgressDialog.show(getActivity(), "", getString(R.string.loading), false);
		dialog.setCancelable(true);
	}

	void closePopup()
	{
		if (dialog != null) dialog.dismiss();
		creating = false;
	}

	public boolean onContextItemSelected(MenuItem aItem)
	{
		try
		{

			AdapterContextMenuInfo menuInfo = (AdapterContextMenuInfo) aItem.getMenuInfo();

			if (Constants.DEBUGMODE) Log.d(Constants.PROJECT_TAG, "Item " + menuInfo.id);
			/* Switch on the ID of the item, to get what the user selected. */

			// curfigure = menuInfo.id;
			figureDatabaseAdapter.notifyDataSetChanged();
			switch (aItem.getItemId()) {
				case Constants.CONTEXTMENU_DELETEITEM:
					MFCService.getInstance(getActivity(), UserSettings).remove(Long.toString(curfigure), curcat, this);
					delete = true;
					return true; /* true means: "we handled the event". */
				case Constants.CONTEXTMENU_OWNITEM:
					MFCService.getInstance(getActivity(), UserSettings).own(Long.toString(curfigure), curcat, "", "", "1", "0000-00-00", this);
					own = true;
					return true;
				case Constants.CONTEXTMENU_WISHITEM:
					MFCService.getInstance(getActivity(), UserSettings).wish(Long.toString(curfigure), curcat, "", this);
					wish = true;
					refreshTab();
					return true;
				case Constants.CONTEXTMENU_ORDERITEM:
					MFCService.getInstance(getActivity(), UserSettings).order(Long.toString(curfigure), curcat, "", "", this);
					buy = true;
					return true;
				case Constants.CONTEXTMENU_GOTOMFC:
					Intent i = new Intent(Intent.ACTION_VIEW);
					i.setData(Uri.parse(Constants.FIGUREURL + Long.toString(curfigure)));
					startActivity(i);
					return false;

				case Constants.CONTEXTMENU_SCANITEM:

					IntentIntegrator.initiateScan(getActivity());

					return true; /* true means: "we handled the event". */

			}

		}
		catch (NullPointerException e)
		{
			Log.e(Constants.PROJECT_TAG, "NullPointerException", e);
		}

		return false;
	}

	public final class FigureAcionMode implements
			ActionMode.Callback
	{

		public FigureAcionMode(long id)
		{
			curfigure = id;
		}

		@Override
		public boolean onCreateActionMode(ActionMode mode, Menu menu)
		{
			if (getArguments().getInt(TAB, -1) > -1) menu.add(Constants.CONTEXTMENU_DELETEITEM, Constants.CONTEXTMENU_DELETEITEM,
					Constants.CONTEXTMENU_DELETEITEM,
					getString(R.string.menu_figure_delete));
			if (getArguments().getInt(TAB, -1) < 0) menu.add(Constants.CONTEXTMENU_WISHITEM, Constants.CONTEXTMENU_WISHITEM, Constants.CONTEXTMENU_WISHITEM,
					getString(R.string.menu_figure_wish));
			if (getArguments().getInt(TAB, -1) < 1) menu.add(Constants.CONTEXTMENU_ORDERITEM, Constants.CONTEXTMENU_ORDERITEM, Constants.CONTEXTMENU_ORDERITEM,
					getString(R.string.menu_figure_order));
			if (getArguments().getInt(TAB, -1) < 2) menu.add(Constants.CONTEXTMENU_OWNITEM, Constants.CONTEXTMENU_OWNITEM, Constants.CONTEXTMENU_OWNITEM,
					getString(R.string.menu_figure_own));
			menu.add(0, Constants.CONTEXTMENU_GOTOMFC, 99, getString(R.string.menu_figure_MFC));
			return true;
		}

		@Override
		public boolean onPrepareActionMode(ActionMode mode, Menu menu)
		{
			return false;
		}

		@Override
		public boolean onActionItemClicked(ActionMode mode, com.actionbarsherlock.view.MenuItem aItem)
		{
			try
			{

				// curfigure = menuInfo.id;
				if (Constants.DEBUGMODE) Log.d(Constants.PROJECT_TAG, "Item " + curfigure);
				/* Switch on the ID of the item, to get what the user selected. */

				switch (aItem.getItemId()) {
					case Constants.CONTEXTMENU_DELETEITEM:
						MFCService.getInstance(getActivity(), UserSettings).remove(Long.toString(curfigure), curcat, FigureListFragment.this);
						delete = true;
						mode.finish();
						return true; /* true means: "we handled the event". */
					case Constants.CONTEXTMENU_OWNITEM:
						MFCService.getInstance(getActivity(), UserSettings).own(Long.toString(curfigure), curcat, "", "", "1", "0000-00-00",
								FigureListFragment.this);
						own = true;
						mode.finish();
						return true;
					case Constants.CONTEXTMENU_WISHITEM:
						MFCService.getInstance(getActivity(), UserSettings).wish(Long.toString(curfigure), curcat, "", FigureListFragment.this);
						wish = true;
						refreshTab();
						mode.finish();
						return true;
					case Constants.CONTEXTMENU_ORDERITEM:
						MFCService.getInstance(getActivity(), UserSettings).order(Long.toString(curfigure), curcat, "", "", FigureListFragment.this);
						buy = true;
						mode.finish();
						return true;
					case Constants.CONTEXTMENU_GOTOMFC:
						Intent i = new Intent(Intent.ACTION_VIEW);
						i.setData(Uri.parse(Constants.FIGUREURL + Long.toString(curfigure)));
						mode.finish();
						startActivity(i);
						return false;

					case Constants.CONTEXTMENU_SCANITEM:

						IntentIntegrator.initiateScan(getActivity());

						return true; /* true means: "we handled the event". */

				}

			}
			catch (NullPointerException e)
			{
				Log.e(Constants.PROJECT_TAG, "NullPointerException", e);
			}
			return false;
		}

		@Override
		public void onDestroyActionMode(ActionMode mode)
		{

		}

	}

	public interface OnFigureSelectedListener
	{
		public void onFigureSelected(String tutUrl);

		public void changeValue(int id, String value);

		public void changeVisibility(int id, int value);

		public void onContextMenu(int id);
	}

	@Override
	public void onRequestcompleted(int requestCode, Object result)
	{
		// if (result instanceof Void) {
		if (requestCode > 0)
		{
			lastlogin = result != null;
		} else
		{

			createTabs();

			noeffect = false;

			ContentValues values = new ContentValues();
			values.put(Figure.ID, curfigure);

			if (wish)
			{
				values.put(Figure.STATUS, 0);
				getActivity().getContentResolver().update(Figure.CONTENT_URI, values, Figure.ID + "=" + values.getAsString(Figure.ID), null);
				refresh = true;
			} else if (buy)
			{
				values.put(Figure.STATUS, 1);
				getActivity().getContentResolver().update(Figure.CONTENT_URI, values, Figure.ID + "=" + values.getAsString(Figure.ID), null);
				refresh = true;
			} else if (own)
			{
				values.put(Figure.STATUS, 2);
				getActivity().getContentResolver().update(Figure.CONTENT_URI, values, Figure.ID + "=" + values.getAsString(Figure.ID), null);
				refresh = true;
			} else if (delete)
			{
				getActivity().getContentResolver().delete(Figure.CONTENT_URI, Figure.ID + "=" + curfigure, null);
			}

			wish = buy = own = delete = false;
			refreshTab();

		}
	}

	public void setWeight(float f)
	{
		Log.d("DEBUG", mView.getParent().getClass().toString());
		mView.setLayoutParams(lp);

	}

	@Override
	public void onImageDownloadFailed(String arg0, String arg1, String arg2)
	{

	}

	@Override
	public void onImageDownloaded(ImageView arg0, String arg1, String arg2, long arg3, long arg4)
	{
		final float centerX = arg0.getWidth() / 2;
		final float centerY = arg0.getHeight() / 2;
		final Flip3dAnimation animation = new Flip3dAnimation(0, 180, centerX, centerY);
		animation.setDuration(200);
		animation.setInterpolator(new AccelerateInterpolator());
		arg0.startAnimation(animation);

	}

	public Callback getActionMode()
	{
		// TODO Auto-generated method stub
		return null;
	}

	public int getContainer()
	{
		// TODO Auto-generated method stub
		return ((ViewGroup) getView().getParent()).getId();
	}
}
